// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`default transpiler 1`] = `
"\\"use strict\\";

var M = require(\\"../main\\");

var $module = M.module(\\"/__fixtures__/code.js\\", module),
    v_1 = [{
  mod: \\"mod\\",
  v0: \\"v0\\",
  C: \\"C\\"
}, null],
    v_4 = [{
  fn1: \\"fn1\\",
  v5: \\"v5\\"
}, v_1],
    v_2 = [{
  a: \\"a\\",
  v3: \\"v3\\",
  i: \\"i1\\",
  v4: \\"v4\\",
  v1: \\"v1\\",
  e: \\"e\\"
}, v_1],
    v_3 = [{
  a: \\"a\\",
  v3: \\"v3\\",
  i: \\"i1\\",
  v4: \\"v4\\",
  v1: \\"v1\\",
  e: \\"e\\",
  v2: \\"v2\\"
}, v_1],
    meta$f = M.meta($module, function (x) {
  return function (module, exports) {
    var ctx = M.frame(x);
    ctx.$.C = meta$C(ctx);
    ctx.$.module = module;
    ctx.$.exports = exports;
    return ctx.scope(this, new.target, 5);
  };
}, f_1, void 0, void 0, [[[{}, null], \\"s\\", \\"1:0-1:31\\"], [v_1, \\"s\\", \\"3:0-3:12\\"], [v_1, \\"s\\", \\"21:0-24:2\\"]], null, \\"1:0-25:0\\", null),
    meta$fn1 = M.meta($module, function (x) {
  return function fn1() {
    var _fn1 = M.frame(x);

    return _fn1.scope(this, new.target, 5);
  };
}, fn1_1, void 0, void 0, [[v_4, \\"s\\", \\"22:2-22:16\\"], [v_4, \\"s\\", \\"23:2-23:55\\"]], \\"fn1\\", \\"21:14-24:1\\", meta$f),
    meta$C = M.meta($module, function (x) {
  return function _C(a) {
    var C = M.frame(x);
    C.$.a = a;
    return C.scope(this, new.target, 5);
  };
}, C_1, C_err, C_fin, [[v_2, \\"s\\", \\"6:2-6:14\\"], [v_2, \\"s\\", \\"7:2-18:3\\"], [v_3, \\"s\\", \\"8:4-8:18\\"], [v_3, \\"s\\", \\"9:4-9:11\\"], [v_3, \\"s\\", \\"10:4-10:42\\"], [v_3, \\"s\\", \\"11:4-13:5\\"], [[{
  a: \\"a\\",
  v3: \\"v3\\",
  i: \\"i\\",
  v4: \\"v4\\",
  v1: \\"v1\\",
  e: \\"e\\",
  v2: \\"v2\\"
}, v_1], \\"s\\", \\"12:6-12:19\\"], [v_3, \\"s\\", \\"14:4-14:42\\"], [v_3, \\"s\\", \\"14:29-14:42\\"], [v_3, \\"s\\", \\"15:4-15:17\\"], [v_2, \\"s\\", \\"17:4-17:24\\"]], \\"C\\", \\"5:0-19:1\\", meta$f);
module.exports = M.exports(meta$f(null));

function C_err(s) {
  switch (s) {
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 17:
    case 18:
    case 22:
    case 23:
      return 28;

    case 14:
    case 15:
      return 29;

    case 16:
      return 31;

    case 19:
    case 20:
      return 32;

    case 21:
      return 34;

    default:
      return 1;
  }
}

function C_fin(s) {
  switch (s) {
    case 14:
    case 15:
      return 30;

    case 19:
    case 20:
      return 33;

    default:
      return 0;
  }
}

function C_1(C, p) {
  for (;;) {
    try {
      switch (C.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            C.$state = 6;
            return p;
          } else {
            C.$state = 6;
            continue;
          }

        case 6:
          C.$.v1 = 10;

          if ((p = M.brk(1)) === M.token) {
            C.$state = 7;
            return p;
          } else {
            C.$state = 7;
            continue;
          }

        case 7:
          if ((p = M.brk(2)) === M.token) {
            C.$state = 8;
            return p;
          } else {
            C.$state = 8;
            continue;
          }

        case 8:
          C.$.v2 = 11;

          if ((p = M.brk(3)) === M.token) {
            C.$state = 9;
            return p;
          } else {
            C.$state = 9;
            continue;
          }

        case 9:
          if ((p = M.brk(4)) === M.token) {
            C.$state = 10;
            return p;
          } else {
            C.$state = 10;
            continue;
          }

        case 10:
          if ((p = C.$$.$.mod.fn1(C.$.a)) === M.token) {
            C.$state = 11;
            return p;
          } else {
            C.$state = 11;
            continue;
          }

        case 11:
          if ((p = C.$$.$.mod.proc1(p, C.$$.$.v0, C.$.v1, C.$.v2, C.$.v3)) === M.token) {
            C.$state = 12;
            return p;
          } else {
            C.$state = 12;
            continue;
          }

        case 12:
          if ((p = M.brk(5)) === M.token) {
            C.$state = 13;
            return p;
          } else {
            C.$state = 13;
            continue;
          }

        case 13:
          C.$.loop = M.iterator(something);
          C.$state = 14;
          continue;

        case 14:
          if (!(C.$.i2 = C.$.loop.next()).done) {
            C.$.i = C.$.i2.value;

            if ((p = M.brk(6)) === M.token) {
              C.$state = 15;
              return p;
            } else {
              C.$state = 15;
              continue;
            }
          } else {
            C.$.fc = 17;
            C.$state = 16;
            continue;
          }

        case 15:
          if ((p = C.$$.$.mod.proc2(C.$.i)) === M.token) {
            C.$state = 14;
            return p;
          } else {
            C.$state = 14;
            continue;
          }

        case 16:
          if (C.$.loop.return) {
            C.$.loop.return();
          }

          C.$.ex = C.$.err1;
          C.$state = C.$.fc;
          continue;

        case 17:
          if ((p = M.brk(7)) === M.token) {
            C.$state = 18;
            return p;
          } else {
            C.$state = 18;
            continue;
          }

        case 18:
          C.$.loop1 = M.iterator(something);
          C.$state = 19;
          continue;

        case 19:
          if (!(C.$.i3 = C.$.loop1.next()).done) {
            C.$.i1 = C.$.i3.value;

            if ((p = M.brk(8)) === M.token) {
              C.$state = 20;
              return p;
            } else {
              C.$state = 20;
              continue;
            }
          } else {
            C.$.fc1 = 22;
            C.$state = 21;
            continue;
          }

        case 20:
          if ((p = C.$$.$.mod.proc3(C.$.i1)) === M.token) {
            C.$state = 19;
            return p;
          } else {
            C.$state = 19;
            continue;
          }

        case 21:
          if (C.$.loop1.return) {
            C.$.loop1.return();
          }

          C.$.ex = C.$.err2;
          C.$state = C.$.fc1;
          continue;

        case 22:
          if ((p = M.brk(9)) === M.token) {
            C.$state = 23;
            return p;
          } else {
            C.$state = 23;
            continue;
          }

        case 23:
          C.$.v4 = 100;
          C.$state = 26;
          continue;

        case 24:
          C.$.e = C.$.ex;

          if ((p = M.brk(10)) === M.token) {
            C.$state = 25;
            return p;
          } else {
            C.$state = 25;
            continue;
          }

        case 25:
          if ((p = C.$$.$.mod.proc4(C.$.e, C.$.v4, C.$.i1)) === M.token) {
            C.$state = 26;
            return p;
          } else {
            C.$state = 26;
            continue;
          }

        case 26:
          return C.pure();

        case 0:
          return C.pure(p);

        case 1:
          return C.raise(p);

        case 27:
          C.$state = 0;
          p = C.$.r;
          continue;

        case 28:
          C.$.ex = p;
          C.$state = 24;
          continue;

        case 29:
          C.$.fc = 24, C.$.err1 = p;
          C.$state = 16;
          continue;

        case 30:
          C.$.fc = 27, C.$.r = p;
          C.$state = 16;
          continue;

        case 31:
          C.$.ex = p;
          C.$state = 24;
          continue;

        case 32:
          C.$.fc1 = 24, C.$.err2 = p;
          C.$state = 21;
          continue;

        case 33:
          C.$.fc1 = 27, C.$.r = p;
          C.$state = 21;
          continue;

        case 34:
          C.$.ex = p;
          C.$state = 24;
          continue;

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      if ((p = ex, C.$state = C_err(C.$state)) !== 1) continue;
      return C.raise(ex);
    }
  }
}

function fn1_1(_fn1, p) {
  var a, b, c;

  for (;;) {
    try {
      switch (_fn1.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            _fn1.$state = 6;
            return p;
          } else {
            _fn1.$state = 6;
            continue;
          }

        case 6:
          _fn1.$.v5 = 10;

          if ((p = M.brk(1)) === M.token) {
            _fn1.$state = 7;
            return p;
          } else {
            _fn1.$state = 7;
            continue;
          }

        case 7:
          if ((p = _fn1.$$.$.mod.f2()) === M.token) {
            _fn1.$state = 8;
            return p;
          } else {
            _fn1.$state = 8;
            continue;
          }

        case 8:
          _fn1.$._ = p;
          c = _fn1.$$.$.C;

          if ((p = new c(_fn1.$$.$.v0, _fn1.$.v5)) === M.token) {
            _fn1.$state = 9;
            return p;
          } else {
            _fn1.$state = 9;
            continue;
          }

        case 9:
          c = M.constr(p);
          b = M.constr([c]);
          a = M.constr({
            a: _fn1.$._,
            b: b
          });

          if ((p = _fn1.$$.$.mod.some(a)) === M.token) {
            _fn1.$state = 10;
            return p;
          } else {
            _fn1.$state = 10;
            continue;
          }

        case 10:
          return _fn1.pure(p);

        case 0:
          return _fn1.pure(p);

        case 1:
          return _fn1.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return _fn1.raise(ex);
    }
  }
}

function f_1(ctx, p) {
  var a;

  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            ctx.$state = 6;
            return p;
          } else {
            ctx.$state = 6;
            continue;
          }

        case 6:
          a = require(\\"mod\\");

          if ((p = M.imports(a, \\"mod\\")) === M.token) {
            ctx.$state = 7;
            return p;
          } else {
            ctx.$state = 7;
            continue;
          }

        case 7:
          ({
            mod: ctx.$.mod
          } = p);

          if ((p = M.brk(1)) === M.token) {
            ctx.$state = 8;
            return p;
          } else {
            ctx.$state = 8;
            continue;
          }

        case 8:
          ctx.$.v0 = 10;

          if ((p = M.brk(2)) === M.token) {
            ctx.$state = 9;
            return p;
          } else {
            ctx.$state = 9;
            continue;
          }

        case 9:
          ctx.$.exports.fn2 = meta$fn1(ctx);
          return ctx.pure();

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}"
`;

exports[`default transpiler 2`] = `
"\\"use strict\\";

var M = require(\\"../main\\");

var $module = M.module(\\"/__fixtures__/mod1.js\\", module),
    v_1 = [{
  j: \\"j\\",
  run: \\"run\\",
  mapTest: \\"mapTest\\",
  flatMapTest: \\"flatMapTest\\",
  filterTest: \\"filterTest\\",
  findIndexTest: \\"findIndexTest\\",
  forEachTest: \\"forEachTest\\",
  reduceTest: \\"reduceTest\\",
  reduceRightTest: \\"reduceRightTest\\",
  arraySortTest: \\"arraySortTest\\",
  typedArraySortTest: \\"typedArraySortTest\\",
  someTest: \\"someTest\\",
  everyTest: \\"everyTest\\",
  g: \\"g\\",
  runEval: \\"runEval\\"
}, null],
    v_22 = [{
  a: \\"a\\"
}, v_1],
    v_23 = [{
  b: \\"b\\"
}, v_22],
    v_20 = [{
  v: \\"v\\",
  self: \\"self\\"
}, v_1],
    v_21 = [{
  i: \\"i\\",
  x: \\"x\\",
  t: \\"t\\"
}, v_20],
    v_18 = [{
  v: \\"v\\",
  self: \\"self\\"
}, v_1],
    v_19 = [{
  i: \\"i\\",
  x: \\"x\\",
  t: \\"t\\"
}, v_18],
    v_17 = [{
  v: \\"v\\",
  w: \\"w\\"
}, v_1],
    v_16 = [{
  v: \\"v\\",
  w: \\"w\\"
}, v_1],
    v_14 = [{
  v: \\"v\\",
  run: \\"run\\"
}, v_1],
    v_15 = [{
  acc: \\"acc\\",
  i: \\"i\\",
  x: \\"x\\",
  t: \\"t\\"
}, v_14],
    v_12 = [{
  v: \\"v\\",
  run: \\"run\\"
}, v_1],
    v_13 = [{
  acc: \\"acc\\",
  i: \\"i\\",
  x: \\"x\\",
  t: \\"t\\"
}, v_12],
    v_11 = [{
  v: \\"v\\",
  self: \\"self\\"
}, v_1],
    v_9 = [{
  v: \\"v\\",
  self: \\"self\\"
}, v_1],
    v_10 = [{
  i: \\"i\\",
  x: \\"x\\",
  t: \\"t\\"
}, v_9],
    v_7 = [{
  v: \\"v\\",
  self: \\"self\\"
}, v_1],
    v_8 = [{
  i: \\"i\\",
  x: \\"x\\",
  t: \\"t\\"
}, v_7],
    v_5 = [{
  v: \\"v\\",
  self: \\"self\\"
}, v_1],
    v_6 = [{
  i: \\"i\\",
  x: \\"x\\",
  t: \\"t\\"
}, v_5],
    v_3 = [{
  v: \\"v\\",
  self: \\"self\\"
}, v_1],
    v_4 = [{
  i: \\"i\\",
  x: \\"x\\",
  t: \\"t\\"
}, v_3],
    v_2 = [{
  i: \\"i\\"
}, v_1],
    meta$f11 = M.meta($module, function (x) {
  return function (module, exports) {
    var ctx = M.frame(x);
    ctx.$.run = meta$run(ctx);
    ctx.$.mapTest = meta$mapTest(ctx);
    ctx.$.flatMapTest = meta$flatMapTest(ctx);
    ctx.$.filterTest = meta$filterTest(ctx);
    ctx.$.findIndexTest = meta$findIndexTest(ctx);
    ctx.$.forEachTest = meta$forEachTest(ctx);
    ctx.$.reduceTest = meta$reduceTest(ctx);
    ctx.$.reduceRightTest = meta$reduceRightTest(ctx);
    ctx.$.arraySortTest = meta$arraySortTest(ctx);
    ctx.$.typedArraySortTest = meta$typedArraySortTest(ctx);
    ctx.$.someTest = meta$someTest(ctx);
    ctx.$.everyTest = meta$everyTest(ctx);
    ctx.$.runEval = meta$runEval(ctx);
    ctx.$.module = module;
    ctx.$.exports = exports;
    return ctx.scope(this, new.target, 5);
  };
}, f_111, void 0, void 0, [[[{}, null], \\"s\\", \\"1:0-1:29\\"], [v_1, \\"s\\", \\"2:0-2:34\\"], [v_1, \\"s\\", \\"4:0-4:10\\"], [v_1, \\"s\\", \\"13:0-13:6\\"], [v_1, \\"s\\", \\"14:0-14:6\\"], [v_1, \\"s\\", \\"152:0-152:12\\"]], null, \\"1:0-164:0\\", null),
    meta$runEval = M.meta($module, function (x) {
  return function _runEval() {
    var runEval = M.frame(x);
    return runEval.scope(this, new.target, 5);
  };
}, runEval_1, void 0, void 0, [[v_22, \\"s\\", \\"154:2-154:14\\"], [v_22, \\"s\\", \\"155:2-162:7\\"]], \\"runEval\\", \\"153:7-163:1\\", meta$f11),
    meta$f10 = M.meta($module, function (x) {
  return function () {
    var ctx = M.frame(x);
    return ctx.scope(this, new.target, 5);
  };
}, f_110, void 0, void 0, [[v_23, \\"s\\", \\"156:4-156:16\\"], [v_23, \\"s\\", \\"157:4-157:40\\"], [v_23, \\"s\\", \\"158:4-158:78\\"], [v_23, null, \\"158:4-158:77\\"], [v_23, \\"s\\", \\"159:4-159:43\\"], [v_23, null, \\"159:24-159:41\\"], [v_23, \\"s\\", \\"160:4-160:39\\"], [v_23, \\"s\\", \\"161:4-161:21\\"]], null, \\"155:10-162:3\\", meta$runEval),
    meta$everyTest = M.meta($module, function (x) {
  return function _everyTest(v) {
    var everyTest = M.frame(x);
    everyTest.$.v = v;
    return everyTest.scope(this, new.target, 5);
  };
}, everyTest_1, void 0, void 0, [[v_20, \\"s\\", \\"132:2-132:18\\"], [v_20, \\"s\\", \\"133:2-149:4\\"]], \\"everyTest\\", \\"131:7-150:1\\", meta$f11),
    meta$f9 = M.meta($module, function (x) {
  return function (i, _x, t) {
    var ctx = M.frame(x);
    ctx.$.i = i;
    ctx.$.x = _x;
    ctx.$.t = t;
    return ctx.scope(this, new.target, 5);
  };
}, f_19, void 0, void 0, [[[{
  i: \\"i\\",
  x: \\"x\\",
  t: \\"t\\"
}, v_20], \\"s\\", \\"145:8-145:20\\"]], null, \\"144:6-146:7\\", meta$everyTest),
    meta$f8 = M.meta($module, function (x) {
  return function (i, _x, t) {
    var ctx = M.frame(x);
    ctx.$._this = this;
    ctx.$.i = i;
    ctx.$.x = _x;
    ctx.$.t = t;
    return ctx.scope(this, new.target, 5);
  };
}, f_18, void 0, void 0, [[v_21, \\"s\\", \\"137:8-137:73\\"], [v_21, \\"s\\", \\"138:8-138:23\\"]], null, \\"136:6-139:7\\", meta$everyTest),
    meta$someTest = M.meta($module, function (x) {
  return function _someTest(v) {
    var someTest = M.frame(x);
    someTest.$.v = v;
    return someTest.scope(this, new.target, 5);
  };
}, someTest_1, void 0, void 0, [[v_18, \\"s\\", \\"111:2-111:18\\"], [v_18, \\"s\\", \\"112:2-128:4\\"]], \\"someTest\\", \\"110:7-129:1\\", meta$f11),
    meta$f7 = M.meta($module, function (x) {
  return function (i, _x, t) {
    var ctx = M.frame(x);
    ctx.$.i = i;
    ctx.$.x = _x;
    ctx.$.t = t;
    return ctx.scope(this, new.target, 5);
  };
}, f_17, void 0, void 0, [[[{
  i: \\"i\\",
  x: \\"x\\",
  t: \\"t\\"
}, v_18], \\"s\\", \\"124:8-124:21\\"]], null, \\"123:6-125:7\\", meta$someTest),
    meta$f6 = M.meta($module, function (x) {
  return function (i, _x, t) {
    var ctx = M.frame(x);
    ctx.$._this = this;
    ctx.$.i = i;
    ctx.$.x = _x;
    ctx.$.t = t;
    return ctx.scope(this, new.target, 5);
  };
}, f_16, void 0, void 0, [[v_19, \\"s\\", \\"116:8-116:72\\"], [v_19, \\"s\\", \\"117:8-117:23\\"]], null, \\"115:6-118:7\\", meta$someTest),
    meta$typedArraySortTest = M.meta($module, function (x) {
  return function _typedArraySortTest(v, w) {
    var typedArraySortTest = M.frame(x);
    typedArraySortTest.$.v = v;
    typedArraySortTest.$.w = w;
    return typedArraySortTest.scope(this, new.target, 5);
  };
}, typedArraySortTest_1, void 0, void 0, [[v_17, \\"s\\", \\"105:2-105:45\\"], [v_17, \\"s\\", \\"106:2-106:28\\"], [v_17, \\"s\\", \\"107:2-107:16\\"]], \\"typedArraySortTest\\", \\"104:7-108:1\\", meta$f11),
    meta$f5 = M.meta($module, function (x) {
  return function (a, b) {
    var ctx = M.frame(x);
    ctx.$.a = a;
    ctx.$.b = b;
    return ctx.scope(this, new.target, 5);
  };
}, f_15, void 0, void 0, [], null, \\"105:28-105:43\\", meta$typedArraySortTest),
    meta$arraySortTest = M.meta($module, function (x) {
  return function _arraySortTest(v, w) {
    var arraySortTest = M.frame(x);
    arraySortTest.$.v = v;
    arraySortTest.$.w = w;
    return arraySortTest.scope(this, new.target, 5);
  };
}, arraySortTest_1, void 0, void 0, [[v_16, \\"s\\", \\"99:2-99:40\\"], [v_16, \\"s\\", \\"100:2-100:23\\"], [v_16, \\"s\\", \\"101:2-101:16\\"]], \\"arraySortTest\\", \\"98:7-102:1\\", meta$f11),
    meta$f4 = M.meta($module, function (x) {
  return function (a, b) {
    var ctx = M.frame(x);
    ctx.$.a = a;
    ctx.$.b = b;
    return ctx.scope(this, new.target, 5);
  };
}, f_14, void 0, void 0, [], null, \\"99:23-99:38\\", meta$arraySortTest),
    meta$reduceRightTest = M.meta($module, function (x) {
  return function _reduceRightTest(v) {
    var reduceRightTest = M.frame(x);
    reduceRightTest.$.run = meta$run1(reduceRightTest);
    reduceRightTest.$.v = v;
    return reduceRightTest.scope(this, new.target, 5);
  };
}, reduceRightTest_1, void 0, void 0, [[v_14, \\"s\\", \\"90:2-90:8\\"], [v_14, \\"s\\", \\"91:2-91:73\\"]], \\"reduceRightTest\\", \\"89:7-96:1\\", meta$f11),
    meta$run1 = M.meta($module, function (x) {
  return function _run(acc, i, _x, t) {
    var run = M.frame(x);
    run.$.acc = acc;
    run.$.i = i;
    run.$.x = _x;
    run.$.t = t;
    return run.scope(this, new.target, 5);
  };
}, run_11, void 0, void 0, [[v_15, \\"s\\", \\"93:4-93:65\\"], [v_15, \\"s\\", \\"94:4-94:25\\"]], \\"run\\", \\"92:2-95:3\\", meta$reduceRightTest),
    meta$reduceTest = M.meta($module, function (x) {
  return function _reduceTest(v) {
    var reduceTest = M.frame(x);
    reduceTest.$.run = _meta$run(reduceTest);
    reduceTest.$.v = v;
    return reduceTest.scope(this, new.target, 5);
  };
}, reduceTest_1, void 0, void 0, [[v_12, \\"s\\", \\"81:2-81:8\\"], [v_12, \\"s\\", \\"82:2-82:63\\"]], \\"reduceTest\\", \\"80:7-87:1\\", meta$f11),
    _meta$run = M.meta($module, function (x) {
  return function _run(acc, i, _x, t) {
    var run = M.frame(x);
    run.$.acc = acc;
    run.$.i = i;
    run.$.x = _x;
    run.$.t = t;
    return run.scope(this, new.target, 5);
  };
}, _run_1, void 0, void 0, [[v_13, \\"s\\", \\"84:4-84:60\\"], [v_13, \\"s\\", \\"85:4-85:25\\"]], \\"run\\", \\"83:2-86:3\\", meta$reduceTest),
    meta$forEachTest = M.meta($module, function (x) {
  return function _forEachTest(v) {
    var forEachTest = M.frame(x);
    forEachTest.$.v = v;
    return forEachTest.scope(this, new.target, 5);
  };
}, forEachTest_1, void 0, void 0, [[v_11, \\"s\\", \\"69:2-69:8\\"], [v_11, \\"s\\", \\"70:2-70:18\\"], [v_11, \\"s\\", \\"71:2-77:4\\"]], \\"forEachTest\\", \\"68:7-78:1\\", meta$f11),
    meta$f3 = M.meta($module, function (x) {
  return function (i, _x, t) {
    var ctx = M.frame(x);
    ctx.$.i = i;
    ctx.$.x = _x;
    ctx.$.t = t;
    return ctx.scope(this, new.target, 5);
  };
}, f_13, void 0, void 0, [[[{
  i: \\"i\\",
  x: \\"x\\",
  t: \\"t\\"
}, v_11], \\"s\\", \\"74:6-74:60\\"]], null, \\"73:4-75:5\\", meta$forEachTest),
    meta$findIndexTest = M.meta($module, function (x) {
  return function _findIndexTest(v) {
    var findIndexTest = M.frame(x);
    findIndexTest.$.v = v;
    return findIndexTest.scope(this, new.target, 5);
  };
}, findIndexTest_1, void 0, void 0, [[v_9, \\"s\\", \\"56:2-56:8\\"], [v_9, \\"s\\", \\"57:2-57:18\\"], [v_9, \\"s\\", \\"58:2-65:4\\"]], \\"findIndexTest\\", \\"55:7-66:1\\", meta$f11),
    meta$f2 = M.meta($module, function (x) {
  return function (i, _x, t) {
    var ctx = M.frame(x);
    ctx.$._this = this;
    ctx.$.i = i;
    ctx.$.x = _x;
    ctx.$.t = t;
    return ctx.scope(this, new.target, 5);
  };
}, f_12, void 0, void 0, [[v_10, \\"s\\", \\"61:6-61:75\\"], [v_10, \\"s\\", \\"62:6-62:21\\"]], null, \\"60:4-63:5\\", meta$findIndexTest),
    meta$filterTest = M.meta($module, function (x) {
  return function _filterTest(v) {
    var filterTest = M.frame(x);
    filterTest.$.v = v;
    return filterTest.scope(this, new.target, 5);
  };
}, filterTest_1, void 0, void 0, [[v_7, \\"s\\", \\"43:2-43:8\\"], [v_7, \\"s\\", \\"44:2-44:18\\"], [v_7, \\"s\\", \\"45:2-52:4\\"]], \\"filterTest\\", \\"42:7-53:1\\", meta$f11),
    meta$f1 = M.meta($module, function (x) {
  return function (i, _x, t) {
    var ctx = M.frame(x);
    ctx.$._this = this;
    ctx.$.i = i;
    ctx.$.x = _x;
    ctx.$.t = t;
    return ctx.scope(this, new.target, 5);
  };
}, f_11, void 0, void 0, [[v_8, \\"s\\", \\"48:6-48:72\\"], [v_8, \\"s\\", \\"49:6-49:21\\"]], null, \\"47:4-50:5\\", meta$filterTest),
    meta$flatMapTest = M.meta($module, function (x) {
  return function _flatMapTest(v) {
    var flatMapTest = M.frame(x);
    flatMapTest.$.v = v;
    return flatMapTest.scope(this, new.target, 5);
  };
}, flatMapTest_1, void 0, void 0, [[v_5, \\"s\\", \\"30:2-30:8\\"], [v_5, \\"s\\", \\"31:2-31:18\\"], [v_5, \\"s\\", \\"32:2-39:4\\"]], \\"flatMapTest\\", \\"29:7-40:1\\", meta$f11),
    _meta$f = M.meta($module, function (x) {
  return function (i, _x, t) {
    var ctx = M.frame(x);
    ctx.$._this = this;
    ctx.$.i = i;
    ctx.$.x = _x;
    ctx.$.t = t;
    return ctx.scope(this, new.target, 5);
  };
}, _f_1, void 0, void 0, [[v_6, \\"s\\", \\"35:6-35:73\\"], [v_6, \\"s\\", \\"36:6-36:27\\"]], null, \\"34:4-37:5\\", meta$flatMapTest),
    meta$mapTest = M.meta($module, function (x) {
  return function _mapTest(v) {
    var mapTest = M.frame(x);
    mapTest.$.v = v;
    return mapTest.scope(this, new.target, 5);
  };
}, mapTest_1, void 0, void 0, [[v_3, \\"s\\", \\"17:2-17:8\\"], [v_3, \\"s\\", \\"18:2-18:18\\"], [v_3, \\"s\\", \\"19:2-26:4\\"]], \\"mapTest\\", \\"16:7-27:1\\", meta$f11),
    meta$f = M.meta($module, function (x) {
  return function (i, _x, t) {
    var ctx = M.frame(x);
    ctx.$._this = this;
    ctx.$.i = i;
    ctx.$.x = _x;
    ctx.$.t = t;
    return ctx.scope(this, new.target, 5);
  };
}, f_1, void 0, void 0, [[v_4, \\"s\\", \\"22:6-22:69\\"], [v_4, \\"s\\", \\"23:6-23:19\\"]], null, \\"21:4-24:5\\", meta$mapTest),
    meta$run = M.meta($module, function (x) {
  return function _run(i = 1) {
    var run = M.frame(x);
    run.$.i = i;
    return run.scope(this, new.target, 5);
  };
}, run_1, void 0, void 0, [[v_2, \\"s\\", \\"7:2-7:9\\"], [v_2, \\"s\\", \\"8:2-8:23\\"], [v_2, \\"s\\", \\"9:2-9:9\\"], [v_2, \\"s\\", \\"10:2-10:31\\"]], \\"run\\", \\"6:0-11:1\\", meta$f11);

module.exports = M.exports(meta$f11(null));

function run_1(run, p) {
  var a;

  for (;;) {
    try {
      switch (run.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            run.$state = 6;
            return p;
          } else {
            run.$state = 6;
            continue;
          }

        case 6:
          run.$$.$.j += run.$.i;

          if ((p = M.brk(1)) === M.token) {
            run.$state = 7;
            return p;
          } else {
            run.$state = 7;
            continue;
          }

        case 7:
          a = run.$.i++;

          if ((p = run.$$.$.M2.f1(a)) === M.token) {
            run.$state = 8;
            return p;
          } else {
            run.$state = 8;
            continue;
          }

        case 8:
          if ((p = run.$$.$.M2.f2(p, run.$.i)) === M.token) {
            run.$state = 9;
            return p;
          } else {
            run.$state = 9;
            continue;
          }

        case 9:
          if ((p = M.brk(2)) === M.token) {
            run.$state = 10;
            return p;
          } else {
            run.$state = 10;
            continue;
          }

        case 10:
          run.$$.$.j += run.$.i;

          if ((p = M.brk(3)) === M.token) {
            run.$state = 11;
            return p;
          } else {
            run.$state = 11;
            continue;
          }

        case 11:
          if ((p = console.log(\`i:\${run.$.i},j:\${run.$$.$.j}\`)) === M.token) {
            run.$state = 12;
            return p;
          } else {
            run.$state = 12;
            continue;
          }

        case 12:
          return run.pure();

        case 0:
          return run.pure(p);

        case 1:
          return run.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return run.raise(ex);
    }
  }
}

function f_1(ctx, p) {
  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            ctx.$state = 6;
            return p;
          } else {
            ctx.$state = 6;
            continue;
          }

        case 6:
          if ((p = console.log(\`map@\${ctx.$.x}[\${ctx.$$.$$.$.j++}]:\${ctx.$.t === ctx.$$.$.v}/\${ctx.$$.$.self === ctx.$._this}\`, ctx.$.i)) === M.token) {
            ctx.$state = 7;
            return p;
          } else {
            ctx.$state = 7;
            continue;
          }

        case 7:
          if ((p = M.brk(1)) === M.token) {
            ctx.$state = 8;
            return p;
          } else {
            ctx.$state = 8;
            continue;
          }

        case 8:
          return ctx.pure(ctx.$.i + ctx.$.x);

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}

function mapTest_1(mapTest, p) {
  var a, b;

  for (;;) {
    try {
      switch (mapTest.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            mapTest.$state = 6;
            return p;
          } else {
            mapTest.$state = 6;
            continue;
          }

        case 6:
          mapTest.$$.$.j = 0;

          if ((p = M.brk(1)) === M.token) {
            mapTest.$state = 7;
            return p;
          } else {
            mapTest.$state = 7;
            continue;
          }

        case 7:
          mapTest.$.self = M.constr({});

          if ((p = M.brk(2)) === M.token) {
            mapTest.$state = 8;
            return p;
          } else {
            mapTest.$state = 8;
            continue;
          }

        case 8:
          a = mapTest.$$.$.rt.map;
          b = mapTest.$.v;

          if ((p = a.call(b, meta$f(mapTest), mapTest.$.self)) === M.token) {
            mapTest.$state = 9;
            return p;
          } else {
            mapTest.$state = 9;
            continue;
          }

        case 9:
          return mapTest.pure(p);

        case 0:
          return mapTest.pure(p);

        case 1:
          return mapTest.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return mapTest.raise(ex);
    }
  }
}

function _f_1(ctx, p) {
  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            ctx.$state = 6;
            return p;
          } else {
            ctx.$state = 6;
            continue;
          }

        case 6:
          if ((p = console.log(\`flatMap@\${ctx.$.x}[\${ctx.$$.$$.$.j++}]:\${ctx.$.t === ctx.$$.$.v}/\${ctx.$$.$.self === ctx.$._this}\`, ctx.$.i)) === M.token) {
            ctx.$state = 7;
            return p;
          } else {
            ctx.$state = 7;
            continue;
          }

        case 7:
          if ((p = M.brk(1)) === M.token) {
            ctx.$state = 8;
            return p;
          } else {
            ctx.$state = 8;
            continue;
          }

        case 8:
          return ctx.pure(M.constr([ctx.$.i, ctx.$.x, ctx.$.i + ctx.$.x]));

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}

function flatMapTest_1(flatMapTest, p) {
  var a, b;

  for (;;) {
    try {
      switch (flatMapTest.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            flatMapTest.$state = 6;
            return p;
          } else {
            flatMapTest.$state = 6;
            continue;
          }

        case 6:
          flatMapTest.$$.$.j = 0;

          if ((p = M.brk(1)) === M.token) {
            flatMapTest.$state = 7;
            return p;
          } else {
            flatMapTest.$state = 7;
            continue;
          }

        case 7:
          flatMapTest.$.self = M.constr({});

          if ((p = M.brk(2)) === M.token) {
            flatMapTest.$state = 8;
            return p;
          } else {
            flatMapTest.$state = 8;
            continue;
          }

        case 8:
          a = flatMapTest.$$.$.rt.flatMap;
          b = flatMapTest.$.v;

          if ((p = a.call(b, _meta$f(flatMapTest), flatMapTest.$.self)) === M.token) {
            flatMapTest.$state = 9;
            return p;
          } else {
            flatMapTest.$state = 9;
            continue;
          }

        case 9:
          return flatMapTest.pure(p);

        case 0:
          return flatMapTest.pure(p);

        case 1:
          return flatMapTest.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return flatMapTest.raise(ex);
    }
  }
}

function f_11(ctx, p) {
  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            ctx.$state = 6;
            return p;
          } else {
            ctx.$state = 6;
            continue;
          }

        case 6:
          if ((p = console.log(\`filter@\${ctx.$.x}[\${ctx.$$.$$.$.j++}]:\${ctx.$.t === ctx.$$.$.v}/\${ctx.$$.$.self === ctx.$._this}\`, ctx.$.i)) === M.token) {
            ctx.$state = 7;
            return p;
          } else {
            ctx.$state = 7;
            continue;
          }

        case 7:
          if ((p = M.brk(1)) === M.token) {
            ctx.$state = 8;
            return p;
          } else {
            ctx.$state = 8;
            continue;
          }

        case 8:
          return ctx.pure(ctx.$.i !== 2);

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}

function filterTest_1(filterTest, p) {
  var a, b;

  for (;;) {
    try {
      switch (filterTest.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            filterTest.$state = 6;
            return p;
          } else {
            filterTest.$state = 6;
            continue;
          }

        case 6:
          filterTest.$$.$.j = 0;

          if ((p = M.brk(1)) === M.token) {
            filterTest.$state = 7;
            return p;
          } else {
            filterTest.$state = 7;
            continue;
          }

        case 7:
          filterTest.$.self = M.constr({});

          if ((p = M.brk(2)) === M.token) {
            filterTest.$state = 8;
            return p;
          } else {
            filterTest.$state = 8;
            continue;
          }

        case 8:
          a = filterTest.$$.$.rt.filter;
          b = filterTest.$.v;

          if ((p = a.call(b, meta$f1(filterTest), filterTest.$.self)) === M.token) {
            filterTest.$state = 9;
            return p;
          } else {
            filterTest.$state = 9;
            continue;
          }

        case 9:
          return filterTest.pure(p);

        case 0:
          return filterTest.pure(p);

        case 1:
          return filterTest.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return filterTest.raise(ex);
    }
  }
}

function f_12(ctx, p) {
  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            ctx.$state = 6;
            return p;
          } else {
            ctx.$state = 6;
            continue;
          }

        case 6:
          if ((p = console.log(\`findIndex@\${ctx.$.x}[\${ctx.$$.$$.$.j++}]:\${ctx.$.t === ctx.$$.$.v}/\${ctx.$$.$.self === ctx.$._this}\`, ctx.$.i)) === M.token) {
            ctx.$state = 7;
            return p;
          } else {
            ctx.$state = 7;
            continue;
          }

        case 7:
          if ((p = M.brk(1)) === M.token) {
            ctx.$state = 8;
            return p;
          } else {
            ctx.$state = 8;
            continue;
          }

        case 8:
          return ctx.pure(ctx.$.i === 2);

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}

function findIndexTest_1(findIndexTest, p) {
  var a, b;

  for (;;) {
    try {
      switch (findIndexTest.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            findIndexTest.$state = 6;
            return p;
          } else {
            findIndexTest.$state = 6;
            continue;
          }

        case 6:
          findIndexTest.$$.$.j = 0;

          if ((p = M.brk(1)) === M.token) {
            findIndexTest.$state = 7;
            return p;
          } else {
            findIndexTest.$state = 7;
            continue;
          }

        case 7:
          findIndexTest.$.self = M.constr({});

          if ((p = M.brk(2)) === M.token) {
            findIndexTest.$state = 8;
            return p;
          } else {
            findIndexTest.$state = 8;
            continue;
          }

        case 8:
          a = findIndexTest.$$.$.rt.findIndex;
          b = findIndexTest.$.v;

          if ((p = a.call(b, meta$f2(findIndexTest), findIndexTest.$.self)) === M.token) {
            findIndexTest.$state = 9;
            return p;
          } else {
            findIndexTest.$state = 9;
            continue;
          }

        case 9:
          return findIndexTest.pure(p);

        case 0:
          return findIndexTest.pure(p);

        case 1:
          return findIndexTest.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return findIndexTest.raise(ex);
    }
  }
}

function f_13(ctx, p) {
  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            ctx.$state = 6;
            return p;
          } else {
            ctx.$state = 6;
            continue;
          }

        case 6:
          if ((p = console.log(\`forEachTest@\${ctx.$.x}[\${ctx.$$.$$.$.j++}]:\${ctx.$.t === ctx.$$.$.v}\`, ctx.$.i)) === M.token) {
            ctx.$state = 7;
            return p;
          } else {
            ctx.$state = 7;
            continue;
          }

        case 7:
          return ctx.pure();

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}

function forEachTest_1(forEachTest, p) {
  var a, b;

  for (;;) {
    try {
      switch (forEachTest.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            forEachTest.$state = 6;
            return p;
          } else {
            forEachTest.$state = 6;
            continue;
          }

        case 6:
          forEachTest.$$.$.j = 0;

          if ((p = M.brk(1)) === M.token) {
            forEachTest.$state = 7;
            return p;
          } else {
            forEachTest.$state = 7;
            continue;
          }

        case 7:
          forEachTest.$.self = M.constr({});

          if ((p = M.brk(2)) === M.token) {
            forEachTest.$state = 8;
            return p;
          } else {
            forEachTest.$state = 8;
            continue;
          }

        case 8:
          a = forEachTest.$$.$.rt.forEach;
          b = forEachTest.$.v;

          if ((p = a.call(b, meta$f3(forEachTest), forEachTest.$.self)) === M.token) {
            forEachTest.$state = 9;
            return p;
          } else {
            forEachTest.$state = 9;
            continue;
          }

        case 9:
          return forEachTest.pure(p);

        case 0:
          return forEachTest.pure(p);

        case 1:
          return forEachTest.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return forEachTest.raise(ex);
    }
  }
}

function _run_1(run, p) {
  for (;;) {
    try {
      switch (run.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            run.$state = 6;
            return p;
          } else {
            run.$state = 6;
            continue;
          }

        case 6:
          if ((p = console.log(\`reduce:\${run.$.acc}@\${run.$.x}[\${run.$$.$$.$.j++}]:\${run.$.t === run.$$.$.v}\`, run.$.i)) === M.token) {
            run.$state = 7;
            return p;
          } else {
            run.$state = 7;
            continue;
          }

        case 7:
          if ((p = M.brk(1)) === M.token) {
            run.$state = 8;
            return p;
          } else {
            run.$state = 8;
            continue;
          }

        case 8:
          return run.pure(\`\${run.$.acc}/\${run.$.i}\`);

        case 0:
          return run.pure(p);

        case 1:
          return run.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return run.raise(ex);
    }
  }
}

function reduceTest_1(reduceTest, p) {
  var a, b;

  for (;;) {
    try {
      switch (reduceTest.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            reduceTest.$state = 6;
            return p;
          } else {
            reduceTest.$state = 6;
            continue;
          }

        case 6:
          reduceTest.$$.$.j = 0;

          if ((p = M.brk(1)) === M.token) {
            reduceTest.$state = 7;
            return p;
          } else {
            reduceTest.$state = 7;
            continue;
          }

        case 7:
          a = reduceTest.$$.$.rt.reduce;
          b = reduceTest.$.v;

          if ((p = a.call(b, reduceTest.$.run, \\"~\\")) === M.token) {
            reduceTest.$state = 8;
            return p;
          } else {
            reduceTest.$state = 8;
            continue;
          }

        case 8:
          reduceTest.$._ = p;
          a = reduceTest.$$.$.rt.reduce;
          b = reduceTest.$.v;

          if ((p = a.call(b, reduceTest.$.run)) === M.token) {
            reduceTest.$state = 9;
            return p;
          } else {
            reduceTest.$state = 9;
            continue;
          }

        case 9:
          a = M.constr([reduceTest.$._, p]);
          return reduceTest.pure(a);

        case 0:
          return reduceTest.pure(p);

        case 1:
          return reduceTest.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return reduceTest.raise(ex);
    }
  }
}

function run_11(run, p) {
  for (;;) {
    try {
      switch (run.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            run.$state = 6;
            return p;
          } else {
            run.$state = 6;
            continue;
          }

        case 6:
          if ((p = console.log(\`reduceRight:\${run.$.acc}@\${run.$.x}[\${run.$$.$$.$.j++}]:\${run.$.t === run.$$.$.v}\`, run.$.i)) === M.token) {
            run.$state = 7;
            return p;
          } else {
            run.$state = 7;
            continue;
          }

        case 7:
          if ((p = M.brk(1)) === M.token) {
            run.$state = 8;
            return p;
          } else {
            run.$state = 8;
            continue;
          }

        case 8:
          return run.pure(\`\${run.$.acc}/\${run.$.i}\`);

        case 0:
          return run.pure(p);

        case 1:
          return run.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return run.raise(ex);
    }
  }
}

function reduceRightTest_1(reduceRightTest, p) {
  var a, b;

  for (;;) {
    try {
      switch (reduceRightTest.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            reduceRightTest.$state = 6;
            return p;
          } else {
            reduceRightTest.$state = 6;
            continue;
          }

        case 6:
          reduceRightTest.$$.$.j = 0;

          if ((p = M.brk(1)) === M.token) {
            reduceRightTest.$state = 7;
            return p;
          } else {
            reduceRightTest.$state = 7;
            continue;
          }

        case 7:
          a = reduceRightTest.$$.$.rt.reduceRight;
          b = reduceRightTest.$.v;

          if ((p = a.call(b, reduceRightTest.$.run, \\"~\\")) === M.token) {
            reduceRightTest.$state = 8;
            return p;
          } else {
            reduceRightTest.$state = 8;
            continue;
          }

        case 8:
          reduceRightTest.$._ = p;
          a = reduceRightTest.$$.$.rt.reduceRight;
          b = reduceRightTest.$.v;

          if ((p = a.call(b, reduceRightTest.$.run)) === M.token) {
            reduceRightTest.$state = 9;
            return p;
          } else {
            reduceRightTest.$state = 9;
            continue;
          }

        case 9:
          a = M.constr([reduceRightTest.$._, p]);
          return reduceRightTest.pure(a);

        case 0:
          return reduceRightTest.pure(p);

        case 1:
          return reduceRightTest.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return reduceRightTest.raise(ex);
    }
  }
}

function f_14(ctx, p) {
  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          return ctx.pure(ctx.$.a - ctx.$.b);

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}

function arraySortTest_1(arraySortTest, p) {
  var a;

  for (;;) {
    try {
      switch (arraySortTest.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            arraySortTest.$state = 6;
            return p;
          } else {
            arraySortTest.$state = 6;
            continue;
          }

        case 6:
          a = arraySortTest.$$.$.rt.arraySort;

          if ((p = a.call(arraySortTest.$.v, meta$f4(arraySortTest))) === M.token) {
            arraySortTest.$state = 7;
            return p;
          } else {
            arraySortTest.$state = 7;
            continue;
          }

        case 7:
          if ((p = M.brk(1)) === M.token) {
            arraySortTest.$state = 8;
            return p;
          } else {
            arraySortTest.$state = 8;
            continue;
          }

        case 8:
          a = arraySortTest.$$.$.rt.arraySort;

          if ((p = a.call(arraySortTest.$.w)) === M.token) {
            arraySortTest.$state = 9;
            return p;
          } else {
            arraySortTest.$state = 9;
            continue;
          }

        case 9:
          if ((p = M.brk(2)) === M.token) {
            arraySortTest.$state = 10;
            return p;
          } else {
            arraySortTest.$state = 10;
            continue;
          }

        case 10:
          return arraySortTest.pure(M.constr([arraySortTest.$.v, arraySortTest.$.w]));

        case 0:
          return arraySortTest.pure(p);

        case 1:
          return arraySortTest.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return arraySortTest.raise(ex);
    }
  }
}

function f_15(ctx, p) {
  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          return ctx.pure(ctx.$.a - ctx.$.b);

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}

function typedArraySortTest_1(typedArraySortTest, p) {
  var a;

  for (;;) {
    try {
      switch (typedArraySortTest.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            typedArraySortTest.$state = 6;
            return p;
          } else {
            typedArraySortTest.$state = 6;
            continue;
          }

        case 6:
          a = typedArraySortTest.$$.$.rt.typedArraySort;

          if ((p = a.call(typedArraySortTest.$.v, meta$f5(typedArraySortTest))) === M.token) {
            typedArraySortTest.$state = 7;
            return p;
          } else {
            typedArraySortTest.$state = 7;
            continue;
          }

        case 7:
          if ((p = M.brk(1)) === M.token) {
            typedArraySortTest.$state = 8;
            return p;
          } else {
            typedArraySortTest.$state = 8;
            continue;
          }

        case 8:
          a = typedArraySortTest.$$.$.rt.typedArraySort;

          if ((p = a.call(typedArraySortTest.$.w)) === M.token) {
            typedArraySortTest.$state = 9;
            return p;
          } else {
            typedArraySortTest.$state = 9;
            continue;
          }

        case 9:
          if ((p = M.brk(2)) === M.token) {
            typedArraySortTest.$state = 10;
            return p;
          } else {
            typedArraySortTest.$state = 10;
            continue;
          }

        case 10:
          return typedArraySortTest.pure(M.constr([typedArraySortTest.$.v, typedArraySortTest.$.w]));

        case 0:
          return typedArraySortTest.pure(p);

        case 1:
          return typedArraySortTest.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return typedArraySortTest.raise(ex);
    }
  }
}

function f_16(ctx, p) {
  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            ctx.$state = 6;
            return p;
          } else {
            ctx.$state = 6;
            continue;
          }

        case 6:
          if ((p = console.log(\`some@\${ctx.$.x}[\${ctx.$$.$$.$.j++}]:\${ctx.$.t === ctx.$$.$.v}/\${ctx.$$.$.self === ctx.$._this}\`, ctx.$.i)) === M.token) {
            ctx.$state = 7;
            return p;
          } else {
            ctx.$state = 7;
            continue;
          }

        case 7:
          if ((p = M.brk(1)) === M.token) {
            ctx.$state = 8;
            return p;
          } else {
            ctx.$state = 8;
            continue;
          }

        case 8:
          return ctx.pure(ctx.$.i === 2);

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}

function f_17(ctx, p) {
  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            ctx.$state = 6;
            return p;
          } else {
            ctx.$state = 6;
            continue;
          }

        case 6:
          return ctx.pure(false);

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}

function someTest_1(someTest, p) {
  var a, b;

  for (;;) {
    try {
      switch (someTest.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            someTest.$state = 6;
            return p;
          } else {
            someTest.$state = 6;
            continue;
          }

        case 6:
          someTest.$.self = M.constr({});

          if ((p = M.brk(1)) === M.token) {
            someTest.$state = 7;
            return p;
          } else {
            someTest.$state = 7;
            continue;
          }

        case 7:
          a = someTest.$$.$.rt.some;
          b = someTest.$.v;

          if ((p = a.call(b, meta$f6(someTest), someTest.$.self)) === M.token) {
            someTest.$state = 8;
            return p;
          } else {
            someTest.$state = 8;
            continue;
          }

        case 8:
          someTest.$._ = p;
          a = someTest.$$.$.rt.some;
          b = someTest.$.v;

          if ((p = a.call(b, meta$f7(someTest), someTest.$.self)) === M.token) {
            someTest.$state = 9;
            return p;
          } else {
            someTest.$state = 9;
            continue;
          }

        case 9:
          a = M.constr([someTest.$._, p]);
          return someTest.pure(a);

        case 0:
          return someTest.pure(p);

        case 1:
          return someTest.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return someTest.raise(ex);
    }
  }
}

function f_18(ctx, p) {
  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            ctx.$state = 6;
            return p;
          } else {
            ctx.$state = 6;
            continue;
          }

        case 6:
          if ((p = console.log(\`every@\${ctx.$.x}[\${ctx.$$.$$.$.j++}]:\${ctx.$.t === ctx.$$.$.v}/\${ctx.$$.$.self === ctx.$._this}\`, ctx.$.i)) === M.token) {
            ctx.$state = 7;
            return p;
          } else {
            ctx.$state = 7;
            continue;
          }

        case 7:
          if ((p = M.brk(1)) === M.token) {
            ctx.$state = 8;
            return p;
          } else {
            ctx.$state = 8;
            continue;
          }

        case 8:
          return ctx.pure(ctx.$.i !== 2);

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}

function f_19(ctx, p) {
  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            ctx.$state = 6;
            return p;
          } else {
            ctx.$state = 6;
            continue;
          }

        case 6:
          return ctx.pure(true);

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}

function everyTest_1(everyTest, p) {
  var a, b;

  for (;;) {
    try {
      switch (everyTest.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            everyTest.$state = 6;
            return p;
          } else {
            everyTest.$state = 6;
            continue;
          }

        case 6:
          everyTest.$.self = M.constr({});

          if ((p = M.brk(1)) === M.token) {
            everyTest.$state = 7;
            return p;
          } else {
            everyTest.$state = 7;
            continue;
          }

        case 7:
          a = everyTest.$$.$.rt.every;
          b = everyTest.$.v;

          if ((p = a.call(b, meta$f8(everyTest), everyTest.$.self)) === M.token) {
            everyTest.$state = 8;
            return p;
          } else {
            everyTest.$state = 8;
            continue;
          }

        case 8:
          everyTest.$._ = p;
          a = everyTest.$$.$.rt.every;
          b = everyTest.$.v;

          if ((p = a.call(b, meta$f9(everyTest), everyTest.$.self)) === M.token) {
            everyTest.$state = 9;
            return p;
          } else {
            everyTest.$state = 9;
            continue;
          }

        case 9:
          a = M.constr([everyTest.$._, p]);
          return everyTest.pure(a);

        case 0:
          return everyTest.pure(p);

        case 1:
          return everyTest.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return everyTest.raise(ex);
    }
  }
}

function f_110(ctx, p) {
  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            ctx.$state = 6;
            return p;
          } else {
            ctx.$state = 6;
            continue;
          }

        case 6:
          ctx.$.b = \\"b\\";

          if ((p = M.brk(1)) === M.token) {
            ctx.$state = 7;
            return p;
          } else {
            ctx.$state = 7;
            continue;
          }

        case 7:
          if ((p = console.log(\\"before eval\\", ctx.$$.$$.$.g, ctx.$$.$.a, ctx.$.b)) === M.token) {
            ctx.$state = 8;
            return p;
          } else {
            ctx.$state = 8;
            continue;
          }

        case 8:
          if ((p = M.brk(2)) === M.token) {
            ctx.$state = 9;
            return p;
          } else {
            ctx.$state = 9;
            continue;
          }

        case 9:
          if ((p = ctx.eval(\`console.log('hi', g, a, b); a+=b+g; console.log('there', g, a, b)\`, 3)) === M.token) {
            ctx.$state = 10;
            return p;
          } else {
            ctx.$state = 10;
            continue;
          }

        case 10:
          if ((p = M.brk(4)) === M.token) {
            ctx.$state = 11;
            return p;
          } else {
            ctx.$state = 11;
            continue;
          }

        case 11:
          if ((p = ctx.eval(\\"a + b + g\\", 5)) === M.token) {
            ctx.$state = 12;
            return p;
          } else {
            ctx.$state = 12;
            continue;
          }

        case 12:
          if ((p = console.log(\\"eval\\", p)) === M.token) {
            ctx.$state = 13;
            return p;
          } else {
            ctx.$state = 13;
            continue;
          }

        case 13:
          if ((p = M.brk(6)) === M.token) {
            ctx.$state = 14;
            return p;
          } else {
            ctx.$state = 14;
            continue;
          }

        case 14:
          if ((p = console.log(\\"after eval\\", ctx.$$.$$.$.g, ctx.$$.$.a, ctx.$.b)) === M.token) {
            ctx.$state = 15;
            return p;
          } else {
            ctx.$state = 15;
            continue;
          }

        case 15:
          if ((p = M.brk(7)) === M.token) {
            ctx.$state = 16;
            return p;
          } else {
            ctx.$state = 16;
            continue;
          }

        case 16:
          return ctx.pure(M.constr([ctx.$$.$$.$.g, ctx.$$.$.a, ctx.$.b]));

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}

function runEval_1(runEval, p) {
  for (;;) {
    try {
      switch (runEval.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            runEval.$state = 6;
            return p;
          } else {
            runEval.$state = 6;
            continue;
          }

        case 6:
          runEval.$.a = \\"a\\";

          if ((p = M.brk(1)) === M.token) {
            runEval.$state = 7;
            return p;
          } else {
            runEval.$state = 7;
            continue;
          }

        case 7:
          if ((p = meta$f10(runEval)()) === M.token) {
            runEval.$state = 8;
            return p;
          } else {
            runEval.$state = 8;
            continue;
          }

        case 8:
          return runEval.pure(p);

        case 0:
          return runEval.pure(p);

        case 1:
          return runEval.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return runEval.raise(ex);
    }
  }
}

function f_111(ctx, p) {
  var a;

  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          ctx.$.exports.__esModule = true;
          ctx.$.exports.mapTest = ctx.$.mapTest;
          ctx.$.exports.flatMapTest = ctx.$.flatMapTest;
          ctx.$.exports.filterTest = ctx.$.filterTest;
          ctx.$.exports.findIndexTest = ctx.$.findIndexTest;
          ctx.$.exports.forEachTest = ctx.$.forEachTest;
          ctx.$.exports.reduceTest = ctx.$.reduceTest;
          ctx.$.exports.reduceRightTest = ctx.$.reduceRightTest;
          ctx.$.exports.arraySortTest = ctx.$.arraySortTest;
          ctx.$.exports.typedArraySortTest = ctx.$.typedArraySortTest;
          ctx.$.exports.someTest = ctx.$.someTest;
          ctx.$.exports.everyTest = ctx.$.everyTest;
          ctx.$.exports.runEval = ctx.$.runEval;

          if ((p = M.brk(0)) === M.token) {
            ctx.$state = 6;
            return p;
          } else {
            ctx.$state = 6;
            continue;
          }

        case 6:
          a = require(\\"./mod2\\");

          if ((p = M.imports(a, \\"./mod2\\")) === M.token) {
            ctx.$state = 7;
            return p;
          } else {
            ctx.$state = 7;
            continue;
          }

        case 7:
          ctx.$.M2 = p;

          if ((p = M.brk(1)) === M.token) {
            ctx.$state = 8;
            return p;
          } else {
            ctx.$state = 8;
            continue;
          }

        case 8:
          a = require(\\"../instr/rt\\");

          if ((p = M.imports(a, \\"../instr/rt\\")) === M.token) {
            ctx.$state = 9;
            return p;
          } else {
            ctx.$state = 9;
            continue;
          }

        case 9:
          ctx.$.rt = p;

          if ((p = M.brk(2)) === M.token) {
            ctx.$state = 10;
            return p;
          } else {
            ctx.$state = 10;
            continue;
          }

        case 10:
          ctx.$.j = 0;

          if ((p = M.brk(3)) === M.token) {
            ctx.$state = 11;
            return p;
          } else {
            ctx.$state = 11;
            continue;
          }

        case 11:
          if ((p = ctx.$.run()) === M.token) {
            ctx.$state = 12;
            return p;
          } else {
            ctx.$state = 12;
            continue;
          }

        case 12:
          if ((p = M.brk(4)) === M.token) {
            ctx.$state = 13;
            return p;
          } else {
            ctx.$state = 13;
            continue;
          }

        case 13:
          if ((p = ctx.$.run()) === M.token) {
            ctx.$state = 14;
            return p;
          } else {
            ctx.$state = 14;
            continue;
          }

        case 14:
          if ((p = M.brk(5)) === M.token) {
            ctx.$state = 15;
            return p;
          } else {
            ctx.$state = 15;
            continue;
          }

        case 15:
          ctx.$.g = \\"g\\";
          return ctx.pure();

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}"
`;

exports[`default transpiler 3`] = `
"\\"use strict\\";

var M = require(\\"../main\\");

var $module = M.module(\\"/__fixtures__/mod2.js\\", module),
    v_1 = [{
  cnt: \\"cnt\\",
  A: \\"A\\",
  B: \\"B\\",
  f1: \\"f1\\",
  f2: \\"f2\\"
}, null],
    v_5 = [{
  i: \\"i\\"
}, v_1],
    v_4 = [{
  i: \\"i\\",
  a: \\"a\\"
}, v_1],
    v_3 = [{
  i: \\"i\\"
}, v_1],
    v_2 = [{
  i: \\"i\\"
}, v_1],
    meta$f = M.meta($module, function (x) {
  return function (module, exports) {
    var ctx = M.frame(x);
    ctx.$.A = meta$A(ctx);
    ctx.$.B = meta$B(ctx);
    ctx.$.f1 = meta$f1(ctx);
    ctx.$.f2 = meta$f2(ctx);
    ctx.$.module = module;
    ctx.$.exports = exports;
    return ctx.scope(this, new.target, 5);
  };
}, f_1, void 0, void 0, [[[{}, null], \\"s\\", \\"1:0-1:12\\"]], null, \\"1:0-25:0\\", null),
    meta$f2 = M.meta($module, function (x) {
  return function _f2(i) {
    var f2 = M.frame(x);
    f2.$.i = i;
    return f2.scope(this, new.target, 5);
  };
}, f2_1, void 0, void 0, [[v_5, \\"s\\", \\"22:2-22:8\\"], [v_5, \\"s\\", \\"23:2-23:32\\"]], \\"f2\\", \\"21:7-24:1\\", meta$f),
    meta$f1 = M.meta($module, function (x) {
  return function _f1(i) {
    var f1 = M.frame(x);
    f1.$.i = i;
    return f1.scope(this, new.target, 5);
  };
}, f1_1, void 0, void 0, [[v_4, \\"s\\", \\"14:2-14:8\\"], [v_4, \\"s\\", \\"15:2-15:32\\"], [v_4, \\"s\\", \\"16:2-16:23\\"], [v_4, \\"s\\", \\"17:2-17:23\\"], [v_4, \\"s\\", \\"18:2-18:13\\"]], \\"f1\\", \\"13:7-19:1\\", meta$f),
    meta$B = M.meta($module, function (x) {
  return function _B(i) {
    var B = M.frame(x);
    B.$._this = this;
    B.$.i = i;
    return B.scope(this, new.target, 5);
  };
}, B_1, void 0, void 0, [[v_3, \\"s\\", \\"9:2-9:13\\"], [v_3, \\"s\\", \\"10:2-10:26\\"]], \\"B\\", \\"8:0-11:1\\", meta$f),
    meta$A = M.meta($module, function (x) {
  return function _A(i) {
    var A = M.frame(x);
    A.$._this = this;
    A.$.i = i;
    return A.scope(this, new.target, 5);
  };
}, A_1, void 0, void 0, [[v_2, \\"s\\", \\"4:2-4:24\\"], [v_2, \\"s\\", \\"5:2-5:22\\"]], \\"A\\", \\"3:0-6:1\\", meta$f);
module.exports = M.exports(meta$f(null));

function A_1(A, p) {
  var a;

  for (;;) {
    try {
      switch (A.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            A.$state = 6;
            return p;
          } else {
            A.$state = 6;
            continue;
          }

        case 6:
          A.$._this.i = A.$.i * 10 + A.$$.$.cnt;

          if ((p = M.brk(1)) === M.token) {
            A.$state = 7;
            return p;
          } else {
            A.$state = 7;
            continue;
          }

        case 7:
          a = A.$$.$.B;

          if ((p = new a(100)) === M.token) {
            A.$state = 8;
            return p;
          } else {
            A.$state = 8;
            continue;
          }

        case 8:
          a = M.constr(p);
          A.$._this.b = a;
          return A.pure();

        case 0:
          return A.pure(p);

        case 1:
          return A.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return A.raise(ex);
    }
  }
}

function B_1(B, p) {
  for (;;) {
    try {
      switch (B.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            B.$state = 6;
            return p;
          } else {
            B.$state = 6;
            continue;
          }

        case 6:
          B.$._this.i = B.$.i;

          if ((p = M.brk(1)) === M.token) {
            B.$state = 7;
            return p;
          } else {
            B.$state = 7;
            continue;
          }

        case 7:
          return B.pure(M.constr({
            b: B.$._this,
            cnt: B.$$.$.cnt
          }));

        case 0:
          return B.pure(p);

        case 1:
          return B.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return B.raise(ex);
    }
  }
}

function f1_1(f1, p) {
  var a, b;

  for (;;) {
    try {
      switch (f1.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            f1.$state = 6;
            return p;
          } else {
            f1.$state = 6;
            continue;
          }

        case 6:
          f1.$$.$.cnt++;

          if ((p = M.brk(1)) === M.token) {
            f1.$state = 7;
            return p;
          } else {
            f1.$state = 7;
            continue;
          }

        case 7:
          if ((p = console.log(\`f1:\${f1.$.i}@\${f1.$$.$.cnt}\`)) === M.token) {
            f1.$state = 8;
            return p;
          } else {
            f1.$state = 8;
            continue;
          }

        case 8:
          if ((p = M.brk(2)) === M.token) {
            f1.$state = 9;
            return p;
          } else {
            f1.$state = 9;
            continue;
          }

        case 9:
          a = f1.$$.$.A;
          b = f1.$$.$.cnt;

          if ((p = new a(b)) === M.token) {
            f1.$state = 10;
            return p;
          } else {
            f1.$state = 10;
            continue;
          }

        case 10:
          a = M.constr(p);
          f1.$.a = a;

          if ((p = M.brk(3)) === M.token) {
            f1.$state = 11;
            return p;
          } else {
            f1.$state = 11;
            continue;
          }

        case 11:
          if ((p = console.log(\\"A:\\", f1.$.a)) === M.token) {
            f1.$state = 12;
            return p;
          } else {
            f1.$state = 12;
            continue;
          }

        case 12:
          if ((p = M.brk(4)) === M.token) {
            f1.$state = 13;
            return p;
          } else {
            f1.$state = 13;
            continue;
          }

        case 13:
          return f1.pure(f1.$$.$.cnt);

        case 0:
          return f1.pure(p);

        case 1:
          return f1.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return f1.raise(ex);
    }
  }
}

function f2_1(f2, p) {
  for (;;) {
    try {
      switch (f2.$state) {
        case 5:
          if ((p = M.brk(0)) === M.token) {
            f2.$state = 6;
            return p;
          } else {
            f2.$state = 6;
            continue;
          }

        case 6:
          f2.$$.$.cnt++;

          if ((p = M.brk(1)) === M.token) {
            f2.$state = 7;
            return p;
          } else {
            f2.$state = 7;
            continue;
          }

        case 7:
          if ((p = console.log(\`f2:\${f2.$.i}@\${f2.$$.$.cnt}\`)) === M.token) {
            f2.$state = 8;
            return p;
          } else {
            f2.$state = 8;
            continue;
          }

        case 8:
          return f2.pure();

        case 0:
          return f2.pure(p);

        case 1:
          return f2.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return f2.raise(ex);
    }
  }
}

function f_1(ctx, p) {
  for (;;) {
    try {
      switch (ctx.$state) {
        case 5:
          ctx.$.exports.__esModule = true;
          ctx.$.exports.f1 = ctx.$.f1;
          ctx.$.exports.f2 = ctx.$.f2;

          if ((p = M.brk(0)) === M.token) {
            ctx.$state = 6;
            return p;
          } else {
            ctx.$state = 6;
            continue;
          }

        case 6:
          ctx.$.cnt = 0;
          return ctx.pure();

        case 0:
          return ctx.pure(p);

        case 1:
          return ctx.raise(p);

        default:
          throw new Error(\\"invalid state\\");
      }
    } catch (ex) {
      return ctx.raise(ex);
    }
  }
}"
`;
