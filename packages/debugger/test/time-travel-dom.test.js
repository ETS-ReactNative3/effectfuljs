require("./setup-time-travel");
const trace = require("./run").bind(null, true);
const D = require("../main");

test("DOM time traveling", function() {
  D.TimeTravel.reset();
  global.console = { log: jest.fn() };
  document.body.innerHTML = `<div id="root"></div>`;
  D.evalThunk(require("./__fixtures__/dom"));
  const mod = trace();
  D.TimeTravel.DOM.track(document.getElementById("root"));
  const text0 = document.body.innerHTML;
  expect(text0).toMatchSnapshot();
  D.TimeTravel.checkpoint();
  mod.changeDom1();
  trace(true);
  const text1 = document.body.innerHTML;
  expect(text1).toMatchSnapshot();
  D.TimeTravel.checkpoint();
  mod.changeDom2();
  trace(true);
  const text2 = document.body.innerHTML;
  expect(text2).toMatchSnapshot();
  D.TimeTravel.checkpoint();
  mod.changeDom3();
  trace(true);
  const text3 = document.body.innerHTML;
  expect(text3).toMatchSnapshot();
  D.TimeTravel.checkpoint();
  mod.changeDom4();
  trace(true);
  const text4 = document.body.innerHTML;
  expect(text4).toMatchSnapshot();
  D.TimeTravel.checkpoint();
  D.TimeTravel.undo();
  expect(document.body.innerHTML).toBe(text3);
  mod.changeDom4();
  trace(true);
  expect(document.body.innerHTML).toBe(text4);
  D.TimeTravel.checkpoint();
  D.TimeTravel.undo();
  expect(document.body.innerHTML).toBe(text3);
  D.TimeTravel.undo();
  expect(document.body.innerHTML).toBe(text2);
  mod.changeDom3();
  trace(true);
  expect(document.body.innerHTML).toBe(text3);
  D.TimeTravel.checkpoint();
  mod.changeDom4();
  trace(true);
  expect(document.body.innerHTML).toBe(text4);
  D.TimeTravel.checkpoint();
  D.TimeTravel.undo();
  expect(document.body.innerHTML).toBe(text3);
  D.TimeTravel.undo();
  expect(document.body.innerHTML).toBe(text2);
  D.TimeTravel.undo();
  expect(document.body.innerHTML).toBe(text1);
  D.TimeTravel.undo();
  expect(document.body.innerHTML).toBe(text0);
});
