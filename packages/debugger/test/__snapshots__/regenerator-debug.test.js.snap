// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`regenerator trace @@iterator is defined on Generator.prototype and returns this 1`] = `16`;

exports[`regenerator trace async functions and await expressions Promise should be a function 1`] = `4`;

exports[`regenerator trace async functions and await expressions Promise should be defined globally 1`] = `10`;

exports[`regenerator trace async functions and await expressions async function expressions should be allowed 1`] = `40`;

exports[`regenerator trace async functions and await expressions dependent promises should be awaitable out of order 1`] = `172`;

exports[`regenerator trace async functions and await expressions nested async function calls should evaluate in the right order 1`] = `478`;

exports[`regenerator trace async functions and await expressions no-await async function should return a Promise 1`] = `98`;

exports[`regenerator trace async functions and await expressions one-await async function should finish asynchronously 1`] = `132`;

exports[`regenerator trace async functions and await expressions regeneratorRuntime should be defined globally 1`] = `10`;

exports[`regenerator trace async functions and await expressions regeneratorRuntime should have a .wrap method 1`] = `4`;

exports[`regenerator trace async functions and await expressions rejected promises should be returned by exceptional async functions 1`] = `255`;

exports[`regenerator trace async functions and await expressions rejected promises should cause await expressions to throw 1`] = `118`;

exports[`regenerator trace async functions and await expressions rejected promises should propagate failure when returned 1`] = `53`;

exports[`regenerator trace async functions and await expressions the this object should default to undefined (strict) 1`] = `51`;

exports[`regenerator trace async functions and await expressions the this object should respect .call's this 1`] = `60`;

exports[`regenerator trace async functions and await expressions the this object shouldn't capture this when not needed 1`] = `7`;

exports[`regenerator trace async generator functions should allow yielding a rejected Promise 1`] = `140`;

exports[`regenerator trace async generator functions should be able to handle many awaits 1`] = `5463`;

exports[`regenerator trace async generator functions should keep results in order 1`] = `1177`;

exports[`regenerator trace async generator functions should not propagate exceptions between iterations 1`] = `80`;

exports[`regenerator trace async generator functions should return a working AsyncIterator 1`] = `247`;

exports[`regenerator trace async generator functions should support super.method(...) in async methods 1`] = `20`;

exports[`regenerator trace async generator functions should work with nested arrow functions 1`] = `25`;

exports[`regenerator trace block binding should translate block binding correctly 1`] = `86`;

exports[`regenerator trace block binding should translate block binding with iife correctly 1`] = `89`;

exports[`regenerator trace call expression ordering (#244) should be correct 1`] = `101`;

exports[`regenerator trace catch parameter shadowing should allow nested catch parameters of the same name 1`] = `176`;

exports[`regenerator trace catch parameter shadowing should leave outer variables unmodified 1`] = `521`;

exports[`regenerator trace catch parameter shadowing should not interfere with non-referential identifiers 1`] = `124`;

exports[`regenerator trace collatz generator eighty two 1`] = `5367`;

exports[`regenerator trace collatz generator fifty two 1`] = `615`;

exports[`regenerator trace collatz generator seven 1`] = `855`;

exports[`regenerator trace completed generator should refuse to resume 1`] = `45`;

exports[`regenerator trace delegate yield should support any iterable argument 1`] = `279`;

exports[`regenerator trace delegated yield should be governed by enclosing try statements 1`] = `513`;

exports[`regenerator trace delegated yield should call .return methods of delegate iterators 1`] = `1347`;

exports[`regenerator trace delegated yield should cope with empty delegatees 1`] = `129`;

exports[`regenerator trace delegated yield should delegate correctly 1`] = `317`;

exports[`regenerator trace delegated yield should dispatch .thrown exceptions correctly 1`] = `84`;

exports[`regenerator trace delegated yield should evaluate to the return value of the delegate 1`] = `194`;

exports[`regenerator trace delegated yield should execute finally blocks of delegate generators 1`] = `90`;

exports[`regenerator trace delegated yield should not be required to have a .return method 1`] = `86`;

exports[`regenerator trace delegated yield should pass sent values through 1`] = `55`;

exports[`regenerator trace delegated yield should support deeper nesting 1`] = `243`;

exports[`regenerator trace delegated yield should work as a subexpression 1`] = `97`;

exports[`regenerator trace directive strings should be kept at top of outer function 1`] = `125`;

exports[`regenerator trace dynamic exception should be dispatched correctly 1`] = `164`;

exports[`regenerator trace expressions containing yield subexpressions should evaluate all array elements before yielding 1`] = `32`;

exports[`regenerator trace expressions containing yield subexpressions should evaluate all subexpressions before yielding 1`] = `42`;

exports[`regenerator trace expressions containing yield subexpressions should handle callee member expressions correctly 1`] = `41`;

exports[`regenerator trace expressions containing yield subexpressions should handle implicit stringification correctly 1`] = `32`;

exports[`regenerator trace expressions containing yield subexpressions should work even with getter member expressions 1`] = `41`;

exports[`regenerator trace for loop with var decl and no update expression should compile and run 1`] = `39`;

exports[`regenerator trace for-in loop generator should allow non-Identifier left-hand expressions 1`] = `268`;

exports[`regenerator trace for-in loop generator should handle break in loop 1`] = `216`;

exports[`regenerator trace for-in loop generator should handle property deletion in loop 1`] = `120`;

exports[`regenerator trace for-in loop generator should handle risky object expressions 1`] = `310`;

exports[`regenerator trace for-in loop generator should handle the simple case 1`] = `157`;

exports[`regenerator trace for-in loop generator should loop over inherited properties 1`] = `172`;

exports[`regenerator trace for-of loops should work for Arrays 1`] = `19`;

exports[`regenerator trace for-of loops should work for generators 1`] = `69`;

exports[`regenerator trace for-of loops should work inside of generators 1`] = `1228`;

exports[`regenerator trace function declaration hoisting should not interfere with function rebinding 1`] = `494`;

exports[`regenerator trace function declaration hoisting should not interfere with nested function rebinding itself 1`] = `91`;

exports[`regenerator trace function declaration hoisting should work even if the declarations are out of order 1`] = `426`;

exports[`regenerator trace function declaration hoisting should work for nested generator function declarations 1`] = `190`;

exports[`regenerator trace generator .throw method should immediately complete a new-born generator 1`] = `22`;

exports[`regenerator trace generator .throw method should not propagate errors handled inside a delegate 1`] = `68`;

exports[`regenerator trace generator .throw method should propagate errors unhandled inside a delegate 1`] = `44`;

exports[`regenerator trace generator .throw method should work after the final call to .next 1`] = `28`;

exports[`regenerator trace generator function expression should behave just like a declared generator 1`] = `117`;

exports[`regenerator trace generator function prototype should follow the expected object model 1`] = `174`;

exports[`regenerator trace generator reentry attempt should complain with a TypeError 1`] = `62`;

exports[`regenerator trace generator return method should behave as if generator actually returned 1`] = `72`;

exports[`regenerator trace generator return method should return both delegate and delegator 1`] = `198`;

exports[`regenerator trace generator return method should work with newborn generators 1`] = `36`;

exports[`regenerator trace infinite sequence generator should allow limiting 1`] = `506`;

exports[`regenerator trace infinite sequence generator should generate a lot of plausible values 1`] = `27106`;

exports[`regenerator trace isGeneratorFunction should work for function declarations 1`] = `27`;

exports[`regenerator trace isGeneratorFunction should work for function expressions 1`] = `27`;

exports[`regenerator trace labeled break and continue statements should allow breaking from any labeled statement 1`] = `1344`;

exports[`regenerator trace labeled break and continue statements should be able to exit multiple try statements 1`] = `1734`;

exports[`regenerator trace nested finally blocks should dynamically execute in order 1`] = `189`;

exports[`regenerator trace nested finally blocks should statically execute in order 1`] = `176`;

exports[`regenerator trace nested generators in try-catch should get a reference to the caught error 1`] = `65`;

exports[`regenerator trace new expressions should be able to contain yield sub-expressions 1`] = `80`;

exports[`regenerator trace newborn generators should allow chaining newborn and non-newborn generators 1`] = `679`;

exports[`regenerator trace newborn generators should be able to access function.sent 1`] = `44`;

exports[`regenerator trace newborn generators should be able to yield* non-newborn generators 1`] = `52`;

exports[`regenerator trace newborn generators should support the ignore-initial-yield wrapper idiom 1`] = `196`;

exports[`regenerator trace object literal generator should yield the correct object 1`] = `167`;

exports[`regenerator trace object literals with multiple yields should receive different sent values 1`] = `155`;

exports[`regenerator trace object properties should work if the generator is a shorthand computed object method 1`] = `51`;

exports[`regenerator trace object properties should work if the generator is a shorthand object method 1`] = `48`;

exports[`regenerator trace object properties should work if the generator is a simple object property 1`] = `57`;

exports[`regenerator trace range generator should yield the empty range 1`] = `39`;

exports[`regenerator trace range generator should yield the range 0..n-1 1`] = `169`;

exports[`regenerator trace regeneratorRuntime should be defined globally 1`] = `10`;

exports[`regenerator trace regeneratorRuntime should be the object name returned by util.runtimeProperty 1`] = `14`;

exports[`regenerator trace regeneratorRuntime should have a .mark method 1`] = `4`;

exports[`regenerator trace regeneratorRuntime should have a .wrap method 1`] = `4`;

exports[`regenerator trace regressions should correctly hoist arguments 1`] = `48`;

exports[`regenerator trace simple argument yielder should support multiple yields in expression 1`] = `29`;

exports[`regenerator trace simple argument yielder should yield only its first argument 1`] = `107`;

exports[`regenerator trace switch statement generator should jump to the correct cases 1`] = `174`;

exports[`regenerator trace the arguments object should alias function parameters 1`] = `477`;

exports[`regenerator trace the arguments object should be shadowable by explicit declarations (sloppy) 1`] = `257`;

exports[`regenerator trace the arguments object should not get confused by properties 1`] = `102`;

exports[`regenerator trace the arguments object should work in simple variadic functions 1`] = `329`;

exports[`regenerator trace the arguments object supports .callee 1`] = `257`;

exports[`regenerator trace the this object should default to undefined (strict) 1`] = `35`;

exports[`regenerator trace the this object should respect .call's this 1`] = `38`;

exports[`regenerator trace the this object shouldn't capture this when not needed 1`] = `7`;

exports[`regenerator trace throw should complete throwing generator 1`] = `44`;

exports[`regenerator trace throw should complete yielding/throwing generator 1`] = `47`;

exports[`regenerator trace try-catch generator should catch dynamic exceptions properly 1`] = `331`;

exports[`regenerator trace try-catch generator should catch static exceptions properly 1`] = `318`;

exports[`regenerator trace try-catch-finally generator should dynamically catch and then finalize 1`] = `230`;

exports[`regenerator trace try-catch-finally generator should execute catch and finally blocks at most once 1`] = `286`;

exports[`regenerator trace try-catch-finally generator should handle backwards jumps in labeled loops 1`] = `420`;

exports[`regenerator trace try-catch-finally generator should handle loop continue statements properly 1`] = `221`;

exports[`regenerator trace try-catch-finally generator should statically catch and then finalize 1`] = `217`;

exports[`regenerator trace try-finally generator should allow additional yields during finally propagation 1`] = `177`;

exports[`regenerator trace try-finally generator should execute finally blocks before throwing 1`] = `243`;

exports[`regenerator trace try-finally generator should execute finally blocks dynamically 1`] = `325`;

exports[`regenerator trace try-finally generator should execute finally blocks statically 1`] = `299`;

exports[`regenerator trace try-finally generator should honor break 1`] = `205`;

exports[`regenerator trace try-finally generator should honor continue 1`] = `334`;

exports[`regenerator trace try-finally generator should honor return 1`] = `183`;

exports[`regenerator trace try-finally generator should let the last finally block override all others 1`] = `171`;

exports[`regenerator trace try-finally generator should override abrupt with break 1`] = `624`;

exports[`regenerator trace try-finally generator should override abrupt with continue 1`] = `1033`;

exports[`regenerator trace try-finally generator should override abrupt with return 1`] = `558`;

exports[`regenerator trace try-finally generator should return the correct value when overridden by finally 1`] = `47`;

exports[`regenerator trace try-finally generator should run finally after break within try 1`] = `165`;

exports[`regenerator trace try-finally generator should throw correct error when finally contains catch 1`] = `122`;

exports[`regenerator trace unqualified function calls should have a global \`this\` object 1`] = `70`;

exports[`regenerator trace update operators should explode left side before yielding 1`] = `47`;

exports[`regenerator trace update operators should read left side before awaiting 1`] = `46`;

exports[`regenerator trace update operators should read left side before yielding 1`] = `38`;

exports[`regenerator trace yield chain should have correct associativity 1`] = `197`;

exports[`regenerator trace yield* expression results can be used in complex expressions 1`] = `233`;

exports[`regenerator trace yield* expression results have correct values 1`] = `108`;
